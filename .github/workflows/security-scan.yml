name: Container Security Scan (OSCAR)

on:
  workflow_dispatch:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  schedule:
    - cron: '0 6 * * 1' # Lunes 06:00 UTC (semanal)

jobs:
  scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write   # subir SARIF a Code Scanning

    env:
      IMAGE_REF: ghcr.io/grycap/oscar:3.6.2
      SBOM_FILE: sbom-oscar-cyclonedx.json
      TRIVY_TABLE: trivy-table.txt
      TRIVY_SARIF: trivy-results.sarif
      GRYPE_TABLE: grype-table.txt
      GRYPE_SARIF: grype-results.sarif

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --------- Instalar Trivy por APT (evita problemas de acción) ---------
      - name: Install Trivy via apt
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release jq
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
          trivy --version

      - name: Pull image
        run: docker pull "$IMAGE_REF"

      # ---------------- SBOM con Syft ----------------
      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.17.8

      - name: Generate SBOM (CycloneDX JSON)
        run: |
          set -eux
          syft packages "$IMAGE_REF" -o cyclonedx-json > "$SBOM_FILE"
          head -n 5 "$SBOM_FILE" || true

      # ---------------- Trivy: tabla + SARIF ----------------
      - name: Trivy scan (table)
        continue-on-error: true
        run: |
          set -eux
          trivy image --scanners vuln --format table \
            --output "$TRIVY_TABLE" "$IMAGE_REF"
          tail -n 40 "$TRIVY_TABLE" || true

      - name: Trivy scan (SARIF)
        continue-on-error: true
        run: |
          set -eux
          trivy image --scanners vuln --format sarif \
            --output "$TRIVY_SARIF" "$IMAGE_REF"
          # Asegurar que no esté vacío (para que el upload no falle)
          if [ ! -s "$TRIVY_SARIF" ]; then
            echo '{"version":"2.1.0","runs":[]}' > "$TRIVY_SARIF"
          fi

      - name: Upload Trivy SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.TRIVY_SARIF }}

      # ---------------- Grype: instalar + actualizar DB + escaneo SBOM ----------------
      - name: Install Grype
        uses: anchore/scan-action/download-grype@v3
        with:
          grype-version: latest

      - name: Grype DB update
        run: |
          set -eux
          grype db update || true
          grype version || true

      - name: Grype scan (table from SBOM, with fallback)
        shell: bash
        continue-on-error: true
        run: |
          set -o pipefail
          echo "== Grype sobre SBOM (tabla) =="
          if grype "sbom:${SBOM_FILE}" -o table --add-cpes-if-none 2>&1 | tee "$GRYPE_TABLE" ; then
            echo "Grype SBOM OK" | tee -a "$GRYPE_TABLE"
          else
            echo "Grype SBOM falló; intentando fallback sobre la imagen..." | tee -a "$GRYPE_TABLE"
            grype "${IMAGE_REF}" -o table --add-cpes-if-none 2>&1 | tee -a "$GRYPE_TABLE" || true
          fi
          # Evitar vacío
          if [ ! -s "$GRYPE_TABLE" ]; then
            {
              echo "NOTE: grype no produjo salida."
              grype version || true
            } > "$GRYPE_TABLE"
          fi

      - name: Grype scan (SARIF from SBOM, with fallback)
        continue-on-error: true
        run: |
          set -eux
          if grype "sbom:${SBOM_FILE}" -o sarif > "$GRYPE_SARIF"; then
            echo "Grype SARIF OK"
          else
            echo "Grype SARIF desde SBOM falló; intentando contra imagen…"
            grype "${IMAGE_REF}" -o sarif > "$GRYPE_SARIF" || true
          fi
          # Validar SARIF
          if ! jq -e '.version and .runs' "$GRYPE_SARIF" >/dev/null 2>&1; then
            echo '{"version":"2.1.0","runs":[]}' > "$GRYPE_SARIF"
          fi
          wc -c "$GRYPE_SARIF" || true

      - name: Upload Grype SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.GRYPE_SARIF }}

      # ---------------- Artefactos para anexos ----------------
      - name: Upload artifacts (SBOM & reports)
        uses: actions/upload-artifact@v4
        with:
          name: oscar-security-reports
          path: |
            ${{ env.SBOM_FILE }}
            ${{ env.TRIVY_TABLE }}
            ${{ env.TRIVY_SARIF }}
            ${{ env.GRYPE_TABLE }}
            ${{ env.GRYPE_SARIF }}

      # ---------------- Resumen visible en el run ----------------
      - name: Job summary
        if: always()
        run: |
          {
            echo "## Resultados de escaneo sobre \`$IMAGE_REF\`"
            echo
            echo "### SBOM (CycloneDX)"
            echo "- Archivo: \`${{ env.SBOM_FILE }}\`"
            echo
            echo "### Trivy (tabla)"
            echo '```'
            tail -n 40 "${{ env.TRIVY_TABLE }}" || true
            echo '```'
            echo
            echo "### Grype (tabla)"
            echo '```'
            tail -n 40 "${{ env.GRYPE_TABLE }}" || true
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"
