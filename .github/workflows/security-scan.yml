name: Container Security Scan (OSCAR)

on:
  workflow_dispatch:
  push:
    branches: [ "main", "master" ]
    paths:
      - "**/Dockerfile"
      - ".github/workflows/security-scan.yml"
  schedule:
    - cron: "0 6 * * 1"  # Lunes 06:00 UTC

jobs:
  scan:
    runs-on: ubuntu-latest
    env:
      IMAGE_REF: ghcr.io/grycap/oscar:3.6.2
      SBOM_FILE: sbom-oscar-cyclonedx.json
      TRIVY_TABLE: trivy-table.txt
      TRIVY_SARIF: trivy-results.sarif
      GRYPE_TABLE: grype-table.txt
      QUALITY_GATE: "off"   # "on" para romper si hay HIGH/CRITICAL

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Pull image
        run: docker pull "$IMAGE_REF"

      # --- Syft (SBOM) ---
      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.17.8

      - name: Generate SBOM (CycloneDX JSON)
        run: syft packages "$IMAGE_REF" -o cyclonedx-json > "$SBOM_FILE"

      # --- Trivy ---
      - name: Set up Trivy
        uses: aquasecurity/setup-trivy@v0.2.2

      # Informe de tabla (para resumen) - NO ROMPE
      - name: Trivy table (no-fail)
        run: |
          trivy image --scanners vuln \
            --format table \
            "$IMAGE_REF" | tee "$TRIVY_TABLE"

      # SARIF + “simulación” de quality-gate:
      # si hay HIGH/CRITICAL, marcamos variable, pero no rompemos aún
      - name: Trivy SARIF (HIGH,CRITICAL) + gate flag
        run: |
          set +e
          trivy image --scanners vuln \
            --severity HIGH,CRITICAL \
            --format sarif \
            --output "$TRIVY_SARIF" \
            "$IMAGE_REF"
          rc=$?
          if [ $rc -ne 0 ]; then
            echo "TRIVY_FAILED=1" >> $GITHUB_ENV
          else
            echo "TRIVY_FAILED=0" >> $GITHUB_ENV
          fi
          exit 0

      - name: Upload Trivy SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.TRIVY_SARIF }}

      # --- Grype desde SBOM ---
      - name: Install Grype
        uses: anchore/scan-action/download-grype@v3

      - name: Grype from SBOM (table, no-fail)
        run: |
          grype sbom:"$SBOM_FILE" -o table | tee "$GRYPE_TABLE"
        continue-on-error: true

      # --- Artefactos ---
      - name: Upload artifacts (SBOM & reports)
        uses: actions/upload-artifact@v4
        with:
          name: oscar-security-reports
          path: |
            ${{ env.SBOM_FILE }}
            ${{ env.TRIVY_TABLE }}
            ${{ env.TRIVY_SARIF }}
            ${{ env.GRYPE_TABLE }}

      # --- Quality Gate opcional (para producción / demo) ---
      - name: Quality gate
        if: env.QUALITY_GATE == 'on'
        run: |
          if [ "${TRIVY_FAILED}" = "1" ]; then
            echo "Quality gate: HIGH/CRITICAL detectados -> fallo intencionado"
            exit 1
          else
            echo "Quality gate: sin HIGH/CRITICAL -> OK"
          fi

      # --- Resumen enriquecido para anexos ---
      - name: Job summary
        if: always()
        run: |
          {
            echo "## Resultados de escaneo sobre \`$IMAGE_REF\`"
            echo ""
            echo "### SBOM"
            echo "- Archivo: \`$SBOM_FILE\` (CycloneDX JSON)"
            echo ""
            echo "### Trivy (tabla)"
            echo '```'
            tail -n 80 "$TRIVY_TABLE" || true
            echo '```'
            echo ""
            echo "### Grype (tabla desde SBOM)"
            echo '```'
            tail -n 80 "$GRYPE_TABLE" || true
            echo '```'
            echo ""
            echo "### Quality gate"
            if [ "${{ env.QUALITY_GATE }}" = "on" ]; then
              [ "${TRIVY_FAILED}" = "1" ] && echo "- Estado: **FAIL** (HIGH/CRITICAL detectados)" || echo "- Estado: **PASS**"
            else
              echo "- Desactivado para evidencias del TFM (no bloquea la ejecución)"
            fi
          } >> "$GITHUB_STEP_SUMMARY"
