name: Container Security Scan (OSCAR)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
    paths:
      - '**/*.go'
      - '**/*.py'
      - '**/Dockerfile'
      - '.github/workflows/security-scan.yml'
  schedule:
    - cron: '0 6 * * 1' # Lunes 06:00 UTC

jobs:
  scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # subir SARIF a Code Scanning
      actions: read

    env:
      IMAGE_REF: ghcr.io/grycap/oscar:3.6.2
      SBOM_FILE: sbom-oscar-cyclonedx.json
      TRIVY_TABLE: trivy-table.txt
      TRIVY_SARIF: trivy-results.sarif
      GRYPE_TABLE: grype-table.txt
      GRYPE_SARIF: grype-results.sarif

    steps:
      - name: Checkout (opcional)
        uses: actions/checkout@v4

      - name: Pull image (asegurar disponibilidad local)
        run: docker pull "$IMAGE_REF"

      # --- SBOM con Syft ---
      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.17.8

      - name: Generate SBOM (CycloneDX JSON)
        shell: bash
        run: syft packages "$IMAGE_REF" -o cyclonedx-json > "$SBOM_FILE"

      # --- Trivy usando la acción oficial ---
      - name: Trivy scan (tabla; no bloquear)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_REF }}
          format: table
          severity: CRITICAL,HIGH
          exit-code: '0'                # no falla el job
          output: ${{ env.TRIVY_TABLE }}

      - name: Trivy scan (SARIF)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_REF }}
          format: sarif
          output: ${{ env.TRIVY_SARIF }}
          args: --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL

      - name: Upload Trivy SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.TRIVY_SARIF }}

      # --- Grype desde SBOM ---
      - name: Install Grype
        uses: anchore/scan-action/download-grype@v3

      - name: Grype scan from SBOM (tabla; no bloquear)
        shell: bash
        run: |
          grype "sbom:${SBOM_FILE}" -o table 2>&1 | tee "$GRYPE_TABLE" || true

      - name: Grype scan from SBOM (SARIF)
        shell: bash
        run: |
          grype "sbom:${SBOM_FILE}" -o sarif > "$GRYPE_SARIF" || true

      - name: Upload Grype SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.GRYPE_SARIF }}

      # --- Artefactos para anexos del TFM ---
      - name: Upload artifacts (SBOM & reports)
        uses: actions/upload-artifact@v4
        with:
          name: oscar-security-reports
          path: |
            ${{ env.SBOM_FILE }}
            ${{ env.TRIVY_TABLE }}
            ${{ env.TRIVY_SARIF }}
            ${{ env.GRYPE_TABLE }}
            ${{ env.GRYPE_SARIF }}

      # --- Resumen visible en el run ---
      - name: Job summary
        if: always()
        shell: bash
        run: |
          {
            echo "## Resultados de escaneo sobre \`$IMAGE_REF\`"
            echo
            echo "### SBOM"
            echo "- Archivo: \`${SBOM_FILE}\` (CycloneDX JSON)"
            echo
            echo "### Trivy (tabla)"
            echo '```'
            tail -n 60 "${TRIVY_TABLE}" || true
            echo '```'
            echo
            echo "### Grype (tabla desde SBOM)"
            echo '```'
            tail -n 60 "${GRYPE_TABLE}" || true
            echo '```'
            echo
            echo "### Quality gate"
            echo "- Desactivado para evidencias del TFM (no bloquea la ejecución)"
          } >> "$GITHUB_STEP_SUMMARY"
